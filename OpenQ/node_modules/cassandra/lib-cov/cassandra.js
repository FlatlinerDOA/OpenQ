/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['cassandra.js']) {
  _$jscoverage['cassandra.js'] = [];
  _$jscoverage['cassandra.js'][3] = 0;
  _$jscoverage['cassandra.js'][15] = 0;
  _$jscoverage['cassandra.js'][16] = 0;
  _$jscoverage['cassandra.js'][17] = 0;
  _$jscoverage['cassandra.js'][18] = 0;
  _$jscoverage['cassandra.js'][19] = 0;
  _$jscoverage['cassandra.js'][24] = 0;
  _$jscoverage['cassandra.js'][27] = 0;
  _$jscoverage['cassandra.js'][37] = 0;
  _$jscoverage['cassandra.js'][38] = 0;
  _$jscoverage['cassandra.js'][40] = 0;
  _$jscoverage['cassandra.js'][41] = 0;
  _$jscoverage['cassandra.js'][42] = 0;
  _$jscoverage['cassandra.js'][45] = 0;
  _$jscoverage['cassandra.js'][47] = 0;
  _$jscoverage['cassandra.js'][50] = 0;
  _$jscoverage['cassandra.js'][51] = 0;
  _$jscoverage['cassandra.js'][53] = 0;
  _$jscoverage['cassandra.js'][54] = 0;
  _$jscoverage['cassandra.js'][55] = 0;
  _$jscoverage['cassandra.js'][57] = 0;
  _$jscoverage['cassandra.js'][59] = 0;
  _$jscoverage['cassandra.js'][60] = 0;
  _$jscoverage['cassandra.js'][61] = 0;
  _$jscoverage['cassandra.js'][62] = 0;
  _$jscoverage['cassandra.js'][63] = 0;
  _$jscoverage['cassandra.js'][67] = 0;
  _$jscoverage['cassandra.js'][68] = 0;
  _$jscoverage['cassandra.js'][71] = 0;
  _$jscoverage['cassandra.js'][72] = 0;
  _$jscoverage['cassandra.js'][73] = 0;
  _$jscoverage['cassandra.js'][77] = 0;
  _$jscoverage['cassandra.js'][78] = 0;
  _$jscoverage['cassandra.js'][81] = 0;
  _$jscoverage['cassandra.js'][82] = 0;
  _$jscoverage['cassandra.js'][87] = 0;
  _$jscoverage['cassandra.js'][88] = 0;
  _$jscoverage['cassandra.js'][89] = 0;
  _$jscoverage['cassandra.js'][90] = 0;
  _$jscoverage['cassandra.js'][96] = 0;
  _$jscoverage['cassandra.js'][97] = 0;
  _$jscoverage['cassandra.js'][98] = 0;
  _$jscoverage['cassandra.js'][99] = 0;
  _$jscoverage['cassandra.js'][100] = 0;
  _$jscoverage['cassandra.js'][103] = 0;
  _$jscoverage['cassandra.js'][105] = 0;
  _$jscoverage['cassandra.js'][106] = 0;
  _$jscoverage['cassandra.js'][107] = 0;
  _$jscoverage['cassandra.js'][108] = 0;
  _$jscoverage['cassandra.js'][109] = 0;
  _$jscoverage['cassandra.js'][111] = 0;
  _$jscoverage['cassandra.js'][112] = 0;
  _$jscoverage['cassandra.js'][114] = 0;
  _$jscoverage['cassandra.js'][115] = 0;
  _$jscoverage['cassandra.js'][116] = 0;
  _$jscoverage['cassandra.js'][117] = 0;
  _$jscoverage['cassandra.js'][118] = 0;
  _$jscoverage['cassandra.js'][121] = 0;
  _$jscoverage['cassandra.js'][122] = 0;
  _$jscoverage['cassandra.js'][123] = 0;
  _$jscoverage['cassandra.js'][124] = 0;
  _$jscoverage['cassandra.js'][126] = 0;
  _$jscoverage['cassandra.js'][138] = 0;
  _$jscoverage['cassandra.js'][139] = 0;
  _$jscoverage['cassandra.js'][140] = 0;
  _$jscoverage['cassandra.js'][142] = 0;
  _$jscoverage['cassandra.js'][143] = 0;
  _$jscoverage['cassandra.js'][144] = 0;
  _$jscoverage['cassandra.js'][151] = 0;
  _$jscoverage['cassandra.js'][152] = 0;
  _$jscoverage['cassandra.js'][153] = 0;
  _$jscoverage['cassandra.js'][154] = 0;
  _$jscoverage['cassandra.js'][155] = 0;
  _$jscoverage['cassandra.js'][158] = 0;
  _$jscoverage['cassandra.js'][164] = 0;
  _$jscoverage['cassandra.js'][165] = 0;
  _$jscoverage['cassandra.js'][166] = 0;
  _$jscoverage['cassandra.js'][167] = 0;
  _$jscoverage['cassandra.js'][168] = 0;
  _$jscoverage['cassandra.js'][171] = 0;
  _$jscoverage['cassandra.js'][180] = 0;
  _$jscoverage['cassandra.js'][181] = 0;
  _$jscoverage['cassandra.js'][187] = 0;
  _$jscoverage['cassandra.js'][188] = 0;
  _$jscoverage['cassandra.js'][191] = 0;
  _$jscoverage['cassandra.js'][192] = 0;
  _$jscoverage['cassandra.js'][193] = 0;
  _$jscoverage['cassandra.js'][194] = 0;
  _$jscoverage['cassandra.js'][195] = 0;
  _$jscoverage['cassandra.js'][196] = 0;
  _$jscoverage['cassandra.js'][207] = 0;
  _$jscoverage['cassandra.js'][208] = 0;
  _$jscoverage['cassandra.js'][209] = 0;
  _$jscoverage['cassandra.js'][210] = 0;
  _$jscoverage['cassandra.js'][211] = 0;
  _$jscoverage['cassandra.js'][213] = 0;
  _$jscoverage['cassandra.js'][214] = 0;
  _$jscoverage['cassandra.js'][216] = 0;
  _$jscoverage['cassandra.js'][217] = 0;
  _$jscoverage['cassandra.js'][219] = 0;
  _$jscoverage['cassandra.js'][223] = 0;
  _$jscoverage['cassandra.js'][224] = 0;
  _$jscoverage['cassandra.js'][225] = 0;
  _$jscoverage['cassandra.js'][228] = 0;
  _$jscoverage['cassandra.js'][229] = 0;
  _$jscoverage['cassandra.js'][231] = 0;
  _$jscoverage['cassandra.js'][243] = 0;
  _$jscoverage['cassandra.js'][244] = 0;
  _$jscoverage['cassandra.js'][245] = 0;
  _$jscoverage['cassandra.js'][246] = 0;
  _$jscoverage['cassandra.js'][247] = 0;
  _$jscoverage['cassandra.js'][251] = 0;
  _$jscoverage['cassandra.js'][252] = 0;
  _$jscoverage['cassandra.js'][253] = 0;
  _$jscoverage['cassandra.js'][256] = 0;
  _$jscoverage['cassandra.js'][258] = 0;
  _$jscoverage['cassandra.js'][259] = 0;
  _$jscoverage['cassandra.js'][262] = 0;
  _$jscoverage['cassandra.js'][263] = 0;
  _$jscoverage['cassandra.js'][264] = 0;
  _$jscoverage['cassandra.js'][265] = 0;
  _$jscoverage['cassandra.js'][267] = 0;
  _$jscoverage['cassandra.js'][268] = 0;
  _$jscoverage['cassandra.js'][271] = 0;
  _$jscoverage['cassandra.js'][272] = 0;
  _$jscoverage['cassandra.js'][276] = 0;
  _$jscoverage['cassandra.js'][277] = 0;
  _$jscoverage['cassandra.js'][278] = 0;
  _$jscoverage['cassandra.js'][279] = 0;
  _$jscoverage['cassandra.js'][280] = 0;
  _$jscoverage['cassandra.js'][281] = 0;
  _$jscoverage['cassandra.js'][282] = 0;
  _$jscoverage['cassandra.js'][283] = 0;
  _$jscoverage['cassandra.js'][284] = 0;
  _$jscoverage['cassandra.js'][286] = 0;
  _$jscoverage['cassandra.js'][287] = 0;
  _$jscoverage['cassandra.js'][288] = 0;
  _$jscoverage['cassandra.js'][289] = 0;
  _$jscoverage['cassandra.js'][290] = 0;
  _$jscoverage['cassandra.js'][294] = 0;
  _$jscoverage['cassandra.js'][295] = 0;
  _$jscoverage['cassandra.js'][300] = 0;
  _$jscoverage['cassandra.js'][301] = 0;
  _$jscoverage['cassandra.js'][303] = 0;
  _$jscoverage['cassandra.js'][304] = 0;
  _$jscoverage['cassandra.js'][305] = 0;
  _$jscoverage['cassandra.js'][307] = 0;
  _$jscoverage['cassandra.js'][319] = 0;
  _$jscoverage['cassandra.js'][320] = 0;
  _$jscoverage['cassandra.js'][321] = 0;
  _$jscoverage['cassandra.js'][322] = 0;
  _$jscoverage['cassandra.js'][323] = 0;
  _$jscoverage['cassandra.js'][327] = 0;
  _$jscoverage['cassandra.js'][328] = 0;
  _$jscoverage['cassandra.js'][329] = 0;
  _$jscoverage['cassandra.js'][332] = 0;
  _$jscoverage['cassandra.js'][334] = 0;
  _$jscoverage['cassandra.js'][335] = 0;
  _$jscoverage['cassandra.js'][338] = 0;
  _$jscoverage['cassandra.js'][339] = 0;
  _$jscoverage['cassandra.js'][340] = 0;
  _$jscoverage['cassandra.js'][341] = 0;
  _$jscoverage['cassandra.js'][343] = 0;
  _$jscoverage['cassandra.js'][346] = 0;
  _$jscoverage['cassandra.js'][347] = 0;
  _$jscoverage['cassandra.js'][350] = 0;
  _$jscoverage['cassandra.js'][351] = 0;
  _$jscoverage['cassandra.js'][352] = 0;
  _$jscoverage['cassandra.js'][353] = 0;
  _$jscoverage['cassandra.js'][354] = 0;
  _$jscoverage['cassandra.js'][357] = 0;
  _$jscoverage['cassandra.js'][358] = 0;
  _$jscoverage['cassandra.js'][360] = 0;
  _$jscoverage['cassandra.js'][367] = 0;
  _$jscoverage['cassandra.js'][368] = 0;
  _$jscoverage['cassandra.js'][374] = 0;
  _$jscoverage['cassandra.js'][375] = 0;
  _$jscoverage['cassandra.js'][376] = 0;
  _$jscoverage['cassandra.js'][377] = 0;
  _$jscoverage['cassandra.js'][378] = 0;
  _$jscoverage['cassandra.js'][381] = 0;
  _$jscoverage['cassandra.js'][382] = 0;
  _$jscoverage['cassandra.js'][383] = 0;
  _$jscoverage['cassandra.js'][386] = 0;
  _$jscoverage['cassandra.js'][387] = 0;
  _$jscoverage['cassandra.js'][388] = 0;
  _$jscoverage['cassandra.js'][389] = 0;
  _$jscoverage['cassandra.js'][390] = 0;
  _$jscoverage['cassandra.js'][392] = 0;
  _$jscoverage['cassandra.js'][393] = 0;
  _$jscoverage['cassandra.js'][394] = 0;
  _$jscoverage['cassandra.js'][396] = 0;
  _$jscoverage['cassandra.js'][397] = 0;
  _$jscoverage['cassandra.js'][398] = 0;
  _$jscoverage['cassandra.js'][399] = 0;
  _$jscoverage['cassandra.js'][400] = 0;
  _$jscoverage['cassandra.js'][401] = 0;
  _$jscoverage['cassandra.js'][409] = 0;
  _$jscoverage['cassandra.js'][421] = 0;
  _$jscoverage['cassandra.js'][422] = 0;
  _$jscoverage['cassandra.js'][435] = 0;
  _$jscoverage['cassandra.js'][436] = 0;
  _$jscoverage['cassandra.js'][437] = 0;
  _$jscoverage['cassandra.js'][439] = 0;
  _$jscoverage['cassandra.js'][445] = 0;
  _$jscoverage['cassandra.js'][446] = 0;
  _$jscoverage['cassandra.js'][447] = 0;
  _$jscoverage['cassandra.js'][448] = 0;
  _$jscoverage['cassandra.js'][449] = 0;
  _$jscoverage['cassandra.js'][452] = 0;
  _$jscoverage['cassandra.js'][453] = 0;
  _$jscoverage['cassandra.js'][454] = 0;
  _$jscoverage['cassandra.js'][457] = 0;
  _$jscoverage['cassandra.js'][459] = 0;
  _$jscoverage['cassandra.js'][460] = 0;
  _$jscoverage['cassandra.js'][461] = 0;
  _$jscoverage['cassandra.js'][462] = 0;
  _$jscoverage['cassandra.js'][464] = 0;
  _$jscoverage['cassandra.js'][466] = 0;
  _$jscoverage['cassandra.js'][467] = 0;
  _$jscoverage['cassandra.js'][475] = 0;
  _$jscoverage['cassandra.js'][476] = 0;
  _$jscoverage['cassandra.js'][477] = 0;
  _$jscoverage['cassandra.js'][479] = 0;
  _$jscoverage['cassandra.js'][485] = 0;
  _$jscoverage['cassandra.js'][486] = 0;
  _$jscoverage['cassandra.js'][487] = 0;
  _$jscoverage['cassandra.js'][488] = 0;
  _$jscoverage['cassandra.js'][489] = 0;
  _$jscoverage['cassandra.js'][492] = 0;
  _$jscoverage['cassandra.js'][493] = 0;
  _$jscoverage['cassandra.js'][500] = 0;
  _$jscoverage['cassandra.js'][501] = 0;
  _$jscoverage['cassandra.js'][502] = 0;
  _$jscoverage['cassandra.js'][503] = 0;
  _$jscoverage['cassandra.js'][504] = 0;
  _$jscoverage['cassandra.js'][505] = 0;
  _$jscoverage['cassandra.js'][516] = 0;
  _$jscoverage['cassandra.js'][517] = 0;
  _$jscoverage['cassandra.js'][524] = 0;
  _$jscoverage['cassandra.js'][527] = 0;
  _$jscoverage['cassandra.js'][529] = 0;
  _$jscoverage['cassandra.js'][530] = 0;
  _$jscoverage['cassandra.js'][532] = 0;
  _$jscoverage['cassandra.js'][534] = 0;
  _$jscoverage['cassandra.js'][536] = 0;
  _$jscoverage['cassandra.js'][537] = 0;
  _$jscoverage['cassandra.js'][538] = 0;
  _$jscoverage['cassandra.js'][539] = 0;
  _$jscoverage['cassandra.js'][540] = 0;
  _$jscoverage['cassandra.js'][542] = 0;
  _$jscoverage['cassandra.js'][543] = 0;
  _$jscoverage['cassandra.js'][544] = 0;
  _$jscoverage['cassandra.js'][546] = 0;
  _$jscoverage['cassandra.js'][547] = 0;
  _$jscoverage['cassandra.js'][550] = 0;
  _$jscoverage['cassandra.js'][551] = 0;
  _$jscoverage['cassandra.js'][552] = 0;
  _$jscoverage['cassandra.js'][555] = 0;
  _$jscoverage['cassandra.js'][558] = 0;
  _$jscoverage['cassandra.js'][562] = 0;
  _$jscoverage['cassandra.js'][563] = 0;
  _$jscoverage['cassandra.js'][564] = 0;
  _$jscoverage['cassandra.js'][567] = 0;
  _$jscoverage['cassandra.js'][570] = 0;
  _$jscoverage['cassandra.js'][573] = 0;
  _$jscoverage['cassandra.js'][584] = 0;
  _$jscoverage['cassandra.js'][585] = 0;
  _$jscoverage['cassandra.js'][592] = 0;
  _$jscoverage['cassandra.js'][595] = 0;
  _$jscoverage['cassandra.js'][597] = 0;
  _$jscoverage['cassandra.js'][598] = 0;
  _$jscoverage['cassandra.js'][600] = 0;
  _$jscoverage['cassandra.js'][601] = 0;
  _$jscoverage['cassandra.js'][602] = 0;
  _$jscoverage['cassandra.js'][604] = 0;
  _$jscoverage['cassandra.js'][605] = 0;
  _$jscoverage['cassandra.js'][606] = 0;
  _$jscoverage['cassandra.js'][608] = 0;
  _$jscoverage['cassandra.js'][609] = 0;
  _$jscoverage['cassandra.js'][612] = 0;
  _$jscoverage['cassandra.js'][613] = 0;
  _$jscoverage['cassandra.js'][614] = 0;
  _$jscoverage['cassandra.js'][617] = 0;
  _$jscoverage['cassandra.js'][620] = 0;
  _$jscoverage['cassandra.js'][623] = 0;
  _$jscoverage['cassandra.js'][630] = 0;
  _$jscoverage['cassandra.js'][631] = 0;
}
_$jscoverage['cassandra.js'][3]++;
var sys = require("sys"), thrift = require("thrift"), Cassandra = require("../gen-nodejs/Cassandra"), ttype = require("../gen-nodejs/cassandra_types");
_$jscoverage['cassandra.js'][15]++;
var Client = (function (host) {
  _$jscoverage['cassandra.js'][16]++;
  var pair = host.split(/:/);
  _$jscoverage['cassandra.js'][17]++;
  this.host = pair[0];
  _$jscoverage['cassandra.js'][18]++;
  this.port = pair[1];
  _$jscoverage['cassandra.js'][19]++;
  this.defaultCL = {read: ttype.ConsistencyLevel.QUORUM, write: ttype.ConsistencyLevel.QUORUM};
  _$jscoverage['cassandra.js'][24]++;
  this.state = 0;
});
_$jscoverage['cassandra.js'][27]++;
sys.inherits(Client, process.EventEmitter);
_$jscoverage['cassandra.js'][37]++;
Client.prototype.connect = (function () {
  _$jscoverage['cassandra.js'][38]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][40]++;
  var keyspace_or_credential = args.shift();
  _$jscoverage['cassandra.js'][41]++;
  var credential = args.shift();
  _$jscoverage['cassandra.js'][42]++;
  if (keyspace_or_credential instanceof String || typeof keyspace_or_credential === "string") {
    _$jscoverage['cassandra.js'][45]++;
    this.keyspace = keyspace_or_credential;
  }
  else {
    _$jscoverage['cassandra.js'][47]++;
    credential = keyspace_or_credential;
  }
  _$jscoverage['cassandra.js'][50]++;
  this.ready = false;
  _$jscoverage['cassandra.js'][51]++;
  this.queue = [];
  _$jscoverage['cassandra.js'][53]++;
  this.connection = thrift.createConnection(this.host, this.port);
  _$jscoverage['cassandra.js'][54]++;
  this.connection.on("error", (function (err) {
  _$jscoverage['cassandra.js'][55]++;
  this.emit("error", err);
}));
  _$jscoverage['cassandra.js'][57]++;
  this.thrift_client = thrift.createClient(Cassandra, this.connection);
  _$jscoverage['cassandra.js'][59]++;
  var self = this;
  _$jscoverage['cassandra.js'][60]++;
  this.connection.on("connect", (function (err) {
  _$jscoverage['cassandra.js'][61]++;
  if (err) {
    _$jscoverage['cassandra.js'][62]++;
    self.emit("error", err);
    _$jscoverage['cassandra.js'][63]++;
    return;
  }
  _$jscoverage['cassandra.js'][67]++;
  if (credential) {
    _$jscoverage['cassandra.js'][68]++;
    self.thrift_client.login(new ttype.AuthenticationRequest(credential), (function (err) {
  _$jscoverage['cassandra.js'][71]++;
  if (err) {
    _$jscoverage['cassandra.js'][72]++;
    self.emit("error", err);
    _$jscoverage['cassandra.js'][73]++;
    return;
  }
  _$jscoverage['cassandra.js'][77]++;
  self.ready = true;
  _$jscoverage['cassandra.js'][78]++;
  self.dispatch();
}));
  }
  else {
    _$jscoverage['cassandra.js'][81]++;
    self.ready = true;
    _$jscoverage['cassandra.js'][82]++;
    self.dispatch();
  }
}));
  _$jscoverage['cassandra.js'][87]++;
  if (this.keyspace) {
    _$jscoverage['cassandra.js'][88]++;
    this.use(this.keyspace, (function (err) {
  _$jscoverage['cassandra.js'][89]++;
  if (err) {
    _$jscoverage['cassandra.js'][90]++;
    self.emit("error", err);
  }
}));
  }
});
_$jscoverage['cassandra.js'][96]++;
Client.prototype.use = (function (keyspace, callback) {
  _$jscoverage['cassandra.js'][97]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][98]++;
  if (! this.ready) {
    _$jscoverage['cassandra.js'][99]++;
    this.queue.push([arguments.callee, args]);
    _$jscoverage['cassandra.js'][100]++;
    return;
  }
  _$jscoverage['cassandra.js'][103]++;
  this.keyspace = keyspace;
  _$jscoverage['cassandra.js'][105]++;
  var self = this;
  _$jscoverage['cassandra.js'][106]++;
  this.thrift_client.describe_keyspace(this.keyspace, (function (err, ksdef) {
  _$jscoverage['cassandra.js'][107]++;
  if (err) {
    _$jscoverage['cassandra.js'][108]++;
    self.emit("error", err);
    _$jscoverage['cassandra.js'][109]++;
    return;
  }
  _$jscoverage['cassandra.js'][111]++;
  self.definition_ = ksdef;
  _$jscoverage['cassandra.js'][112]++;
  self.column_families_ = {};
  _$jscoverage['cassandra.js'][114]++;
  var i = ksdef.cf_defs.length;
  _$jscoverage['cassandra.js'][115]++;
  var cf;
  _$jscoverage['cassandra.js'][116]++;
  while (i--) {
    _$jscoverage['cassandra.js'][117]++;
    cf = ksdef.cf_defs[i];
    _$jscoverage['cassandra.js'][118]++;
    self.column_families_[cf.name] = cf;
}
  _$jscoverage['cassandra.js'][121]++;
  self.thrift_client.set_keyspace(self.keyspace, (function (err) {
  _$jscoverage['cassandra.js'][122]++;
  if (err) {
    _$jscoverage['cassandra.js'][123]++;
    selt.emit("error", err);
    _$jscoverage['cassandra.js'][124]++;
    return;
  }
  _$jscoverage['cassandra.js'][126]++;
  self.emit("keyspaceSet", self.column_families_);
}));
}));
});
_$jscoverage['cassandra.js'][138]++;
Client.prototype.consistencyLevel = (function () {
  _$jscoverage['cassandra.js'][139]++;
  if (arguments.length == 0) {
    _$jscoverage['cassandra.js'][140]++;
    return this.defaultCL;
  }
  else {
    _$jscoverage['cassandra.js'][142]++;
    var newCL = arguments[0];
    _$jscoverage['cassandra.js'][143]++;
    this.defaultCL.read = newCL.read || ttype.ConsistencyLevel.QUORUM;
    _$jscoverage['cassandra.js'][144]++;
    this.defaultCL.write = newCL.write || ttype.ConsistencyLevel.QUORUM;
  }
});
_$jscoverage['cassandra.js'][151]++;
Client.prototype.addKeySpace = (function (ksdef, callback) {
  _$jscoverage['cassandra.js'][152]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][153]++;
  if (! this.ready) {
    _$jscoverage['cassandra.js'][154]++;
    this.queue.push([arguments.callee, args]);
    _$jscoverage['cassandra.js'][155]++;
    return;
  }
  _$jscoverage['cassandra.js'][158]++;
  this.thrift_client.system_add_keyspace(new ttype.KsDef(ksdef), callback);
});
_$jscoverage['cassandra.js'][164]++;
Client.prototype.dropKeySpace = (function (keyspace, callback) {
  _$jscoverage['cassandra.js'][165]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][166]++;
  if (! this.ready) {
    _$jscoverage['cassandra.js'][167]++;
    this.queue.push([arguments.callee, args]);
    _$jscoverage['cassandra.js'][168]++;
    return;
  }
  _$jscoverage['cassandra.js'][171]++;
  this.thrift_client.system_drop_keyspace(keyspace, callback);
});
_$jscoverage['cassandra.js'][180]++;
Client.prototype.getColumnFamily = (function (name) {
  _$jscoverage['cassandra.js'][181]++;
  return new ColumnFamily(this, name);
});
_$jscoverage['cassandra.js'][187]++;
Client.prototype.close = (function () {
  _$jscoverage['cassandra.js'][188]++;
  this.connection.end();
});
_$jscoverage['cassandra.js'][191]++;
Client.prototype.dispatch = (function () {
  _$jscoverage['cassandra.js'][192]++;
  if (this.ready) {
    _$jscoverage['cassandra.js'][193]++;
    if (this.queue.length > 0) {
      _$jscoverage['cassandra.js'][194]++;
      var next = this.queue.shift();
      _$jscoverage['cassandra.js'][195]++;
      next[0].apply(this, next[1]);
      _$jscoverage['cassandra.js'][196]++;
      this.dispatch();
    }
  }
});
_$jscoverage['cassandra.js'][207]++;
var ColumnFamily = (function (client, name) {
  _$jscoverage['cassandra.js'][208]++;
  this.name = name;
  _$jscoverage['cassandra.js'][209]++;
  this.queue = [];
  _$jscoverage['cassandra.js'][210]++;
  this.ready = false;
  _$jscoverage['cassandra.js'][211]++;
  this.client_ = client;
  _$jscoverage['cassandra.js'][213]++;
  var self = this;
  _$jscoverage['cassandra.js'][214]++;
  this.client_.on("keyspaceSet", (function (cfdef) {
  _$jscoverage['cassandra.js'][216]++;
  var cf = cfdef[self.name];
  _$jscoverage['cassandra.js'][217]++;
  if (! cf) {
    _$jscoverage['cassandra.js'][219]++;
    self.client_.emit("error", new Error("Column Family " + self.name + " does not exist."));
  }
  _$jscoverage['cassandra.js'][223]++;
  for (var prop in cf) {
    _$jscoverage['cassandra.js'][224]++;
    if (cf.hasOwnProperty(prop)) {
      _$jscoverage['cassandra.js'][225]++;
      self[prop] = cf[prop];
    }
}
  _$jscoverage['cassandra.js'][228]++;
  self.isSuper = self.column_type === "Super";
  _$jscoverage['cassandra.js'][229]++;
  self.ready = true;
  _$jscoverage['cassandra.js'][231]++;
  self.dispatch();
}));
});
_$jscoverage['cassandra.js'][243]++;
ColumnFamily.prototype.get = (function () {
  _$jscoverage['cassandra.js'][244]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][245]++;
  if (! this.ready) {
    _$jscoverage['cassandra.js'][246]++;
    this.queue.push([arguments.callee, args]);
    _$jscoverage['cassandra.js'][247]++;
    return;
  }
  _$jscoverage['cassandra.js'][251]++;
  var callback;
  _$jscoverage['cassandra.js'][252]++;
  if (typeof args[args.length - 1] === "function") {
    _$jscoverage['cassandra.js'][253]++;
    callback = args.pop();
  }
  _$jscoverage['cassandra.js'][256]++;
  var keys = args.shift();
  _$jscoverage['cassandra.js'][258]++;
  if (! (keys instanceof Array)) {
    _$jscoverage['cassandra.js'][259]++;
    keys = [keys];
  }
  _$jscoverage['cassandra.js'][262]++;
  var method_args = this.isSuper? this.parseArgumentsForSuperCF_(args): this.parseArgumentsForStandardCF_(args);
  _$jscoverage['cassandra.js'][263]++;
  var column_parent = method_args[0];
  _$jscoverage['cassandra.js'][264]++;
  var predicate = method_args[1];
  _$jscoverage['cassandra.js'][265]++;
  var cl = method_args[2] || this.client_.defaultCL.read;
  _$jscoverage['cassandra.js'][267]++;
  var self = this;
  _$jscoverage['cassandra.js'][268]++;
  this.client_.thrift_client.multiget_slice(keys, column_parent, predicate, cl, (function (err, res) {
  _$jscoverage['cassandra.js'][271]++;
  if (err) {
    _$jscoverage['cassandra.js'][272]++;
    callback(err, obj);
  }
  _$jscoverage['cassandra.js'][276]++;
  var obj = {};
  _$jscoverage['cassandra.js'][277]++;
  var key, col, sub_col;
  _$jscoverage['cassandra.js'][278]++;
  for (key in res) {
    _$jscoverage['cassandra.js'][279]++;
    if (res.hasOwnProperty(key)) {
      _$jscoverage['cassandra.js'][280]++;
      obj[key] = {};
      _$jscoverage['cassandra.js'][281]++;
      var i = res[key].length;
      _$jscoverage['cassandra.js'][282]++;
      while (i--) {
        _$jscoverage['cassandra.js'][283]++;
        col = res[key][i].super_column;
        _$jscoverage['cassandra.js'][284]++;
        if (col) {
          _$jscoverage['cassandra.js'][286]++;
          obj[key][col.name] = {};
          _$jscoverage['cassandra.js'][287]++;
          var j = col.columns.length;
          _$jscoverage['cassandra.js'][288]++;
          while (j--) {
            _$jscoverage['cassandra.js'][289]++;
            sub_col = col.columns[j];
            _$jscoverage['cassandra.js'][290]++;
            obj[key][col.name][sub_col.name] = sub_col.value;
}
        }
        else {
          _$jscoverage['cassandra.js'][294]++;
          col = res[key][i].column;
          _$jscoverage['cassandra.js'][295]++;
          obj[key][col.name] = col.value;
        }
}
    }
}
  _$jscoverage['cassandra.js'][300]++;
  if (keys.length == 1) {
    _$jscoverage['cassandra.js'][301]++;
    obj = obj[keys[0]];
  }
  _$jscoverage['cassandra.js'][303]++;
  callback(err, obj);
  _$jscoverage['cassandra.js'][304]++;
  if (keys.length == 1) {
    _$jscoverage['cassandra.js'][305]++;
    res = res[keys[0]];
  }
  _$jscoverage['cassandra.js'][307]++;
  callback(err, res);
}));
});
_$jscoverage['cassandra.js'][319]++;
ColumnFamily.prototype.count = (function () {
  _$jscoverage['cassandra.js'][320]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][321]++;
  if (! this.ready) {
    _$jscoverage['cassandra.js'][322]++;
    this.queue.push([arguments.callee, args]);
    _$jscoverage['cassandra.js'][323]++;
    return;
  }
  _$jscoverage['cassandra.js'][327]++;
  var callback;
  _$jscoverage['cassandra.js'][328]++;
  if (typeof args[args.length - 1] === "function") {
    _$jscoverage['cassandra.js'][329]++;
    callback = args.pop();
  }
  _$jscoverage['cassandra.js'][332]++;
  var keys = args.shift();
  _$jscoverage['cassandra.js'][334]++;
  if (! (keys instanceof Array)) {
    _$jscoverage['cassandra.js'][335]++;
    keys = [keys];
  }
  _$jscoverage['cassandra.js'][338]++;
  var method_args = this.isSuper? this.parseArgumentsForSuperCF_(args): this.parseArgumentsForStandardCF_(args);
  _$jscoverage['cassandra.js'][339]++;
  var column_parent = method_args[0];
  _$jscoverage['cassandra.js'][340]++;
  var predicate = method_args[1];
  _$jscoverage['cassandra.js'][341]++;
  var cl = method_args[2] || this.client_.defaultCL.read;
  _$jscoverage['cassandra.js'][343]++;
  this.client_.thrift_client.multiget_count(keys, column_parent, predicate, cl, (function (err, res) {
  _$jscoverage['cassandra.js'][346]++;
  if (err) {
    _$jscoverage['cassandra.js'][347]++;
    callback(err, obj);
  }
  _$jscoverage['cassandra.js'][350]++;
  var obj = {};
  _$jscoverage['cassandra.js'][351]++;
  var key, count;
  _$jscoverage['cassandra.js'][352]++;
  for (key in res) {
    _$jscoverage['cassandra.js'][353]++;
    if (res.hasOwnProperty(key)) {
      _$jscoverage['cassandra.js'][354]++;
      obj[key] = res[key];
    }
}
  _$jscoverage['cassandra.js'][357]++;
  if (keys.length == 1) {
    _$jscoverage['cassandra.js'][358]++;
    obj = obj[keys[0]];
  }
  _$jscoverage['cassandra.js'][360]++;
  callback(err, obj);
}));
});
_$jscoverage['cassandra.js'][367]++;
ColumnFamily.prototype.slice = (function () {
  _$jscoverage['cassandra.js'][368]++;
  this.client_.emit("error", new Error("slice(get_range_slices, get_indexed_slices) not supported."));
});
_$jscoverage['cassandra.js'][374]++;
ColumnFamily.prototype.set = (function () {
  _$jscoverage['cassandra.js'][375]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][376]++;
  if (! this.ready) {
    _$jscoverage['cassandra.js'][377]++;
    this.queue.push([arguments.callee, args]);
    _$jscoverage['cassandra.js'][378]++;
    return;
  }
  _$jscoverage['cassandra.js'][381]++;
  var callback;
  _$jscoverage['cassandra.js'][382]++;
  if (typeof args[args.length - 1] === "function") {
    _$jscoverage['cassandra.js'][383]++;
    callback = args.pop();
  }
  _$jscoverage['cassandra.js'][386]++;
  var key = args.shift();
  _$jscoverage['cassandra.js'][387]++;
  var values = args.shift() || {};
  _$jscoverage['cassandra.js'][388]++;
  var options = args.shift() || {};
  _$jscoverage['cassandra.js'][389]++;
  var cl = options.consistencyLevel || this.client_.defaultCL.write;
  _$jscoverage['cassandra.js'][390]++;
  var ts = new Date().getTime();
  _$jscoverage['cassandra.js'][392]++;
  var prop, value;
  _$jscoverage['cassandra.js'][393]++;
  var mutations = [], columns;
  _$jscoverage['cassandra.js'][394]++;
  if (this.isSuper) {
    _$jscoverage['cassandra.js'][396]++;
    for (prop in values) {
      _$jscoverage['cassandra.js'][397]++;
      if (values.hasOwnProperty(prop)) {
        _$jscoverage['cassandra.js'][398]++;
        columns = [];
        _$jscoverage['cassandra.js'][399]++;
        value = values[prop];
        _$jscoverage['cassandra.js'][400]++;
        for (var col in value) {
          _$jscoverage['cassandra.js'][401]++;
          columns.push(new ttype.Column({name: col, value: "" + value[col], timestamp: ts, ttl: null}));
}
        _$jscoverage['cassandra.js'][409]++;
        mutations.push(new ttype.Mutation({column_or_supercolumn: new ttype.ColumnOrSuperColumn({super_column: new ttype.SuperColumn({name: prop, columns: columns})})}));
      }
}
  }
  else {
    _$jscoverage['cassandra.js'][421]++;
    for (prop in values) {
      _$jscoverage['cassandra.js'][422]++;
      mutations.push(new ttype.Mutation({column_or_supercolumn: new ttype.ColumnOrSuperColumn({column: new ttype.Column({name: prop, value: "" + values[prop], timestamp: ts, ttl: null})})}));
}
  }
  _$jscoverage['cassandra.js'][435]++;
  var mutation_map = {};
  _$jscoverage['cassandra.js'][436]++;
  mutation_map[key] = {};
  _$jscoverage['cassandra.js'][437]++;
  mutation_map[key][this.name] = mutations;
  _$jscoverage['cassandra.js'][439]++;
  this.client_.thrift_client.batch_mutate(mutation_map, cl, callback);
});
_$jscoverage['cassandra.js'][445]++;
ColumnFamily.prototype.remove = (function () {
  _$jscoverage['cassandra.js'][446]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][447]++;
  if (! this.ready) {
    _$jscoverage['cassandra.js'][448]++;
    this.queue.push([arguments.callee, args]);
    _$jscoverage['cassandra.js'][449]++;
    return;
  }
  _$jscoverage['cassandra.js'][452]++;
  var callback;
  _$jscoverage['cassandra.js'][453]++;
  if (typeof args[args.length - 1] === "function") {
    _$jscoverage['cassandra.js'][454]++;
    callback = args.pop();
  }
  _$jscoverage['cassandra.js'][457]++;
  var key = args.shift();
  _$jscoverage['cassandra.js'][459]++;
  var method_args = this.isSuper? this.parseArgumentsForSuperCF_(args): this.parseArgumentsForStandardCF_(args);
  _$jscoverage['cassandra.js'][460]++;
  var column_parent = method_args[0];
  _$jscoverage['cassandra.js'][461]++;
  var predicate = method_args[1];
  _$jscoverage['cassandra.js'][462]++;
  var cl = method_args[2] || this.client_.defaultCL.write;
  _$jscoverage['cassandra.js'][464]++;
  var ts = new Date().getTime();
  _$jscoverage['cassandra.js'][466]++;
  var mutations = [];
  _$jscoverage['cassandra.js'][467]++;
  mutations.push(new ttype.Mutation({deletion: new ttype.Deletion({timestamp: ts, super_column: column_parent.super_column, predicate: predicate.column_names? predicate: null})}));
  _$jscoverage['cassandra.js'][475]++;
  var mutation_map = {};
  _$jscoverage['cassandra.js'][476]++;
  mutation_map[key] = {};
  _$jscoverage['cassandra.js'][477]++;
  mutation_map[key][this.name] = mutations;
  _$jscoverage['cassandra.js'][479]++;
  this.client_.thrift_client.batch_mutate(mutation_map, cl, callback);
});
_$jscoverage['cassandra.js'][485]++;
ColumnFamily.prototype.truncate = (function () {
  _$jscoverage['cassandra.js'][486]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['cassandra.js'][487]++;
  if (! this.ready) {
    _$jscoverage['cassandra.js'][488]++;
    this.queue.push([arguments.callee, args]);
    _$jscoverage['cassandra.js'][489]++;
    return;
  }
  _$jscoverage['cassandra.js'][492]++;
  var callback = args.shift();
  _$jscoverage['cassandra.js'][493]++;
  this.client_.thrift_client.truncate(this.name, callback);
});
_$jscoverage['cassandra.js'][500]++;
ColumnFamily.prototype.dispatch = (function () {
  _$jscoverage['cassandra.js'][501]++;
  if (this.ready) {
    _$jscoverage['cassandra.js'][502]++;
    if (this.queue.length > 0) {
      _$jscoverage['cassandra.js'][503]++;
      var next = this.queue.shift();
      _$jscoverage['cassandra.js'][504]++;
      next[0].apply(this, next[1]);
      _$jscoverage['cassandra.js'][505]++;
      this.dispatch();
    }
  }
});
_$jscoverage['cassandra.js'][516]++;
ColumnFamily.prototype.parseArgumentsForSuperCF_ = (function (args) {
  _$jscoverage['cassandra.js'][517]++;
  var default_options = {start: "", finish: "", reversed: false, count: 100, consistencyLevel: null};
  _$jscoverage['cassandra.js'][524]++;
  var column_parent = {column_family: this.name};
  _$jscoverage['cassandra.js'][527]++;
  var predicate = {};
  _$jscoverage['cassandra.js'][529]++;
  var super_column_or_options = args.shift();
  _$jscoverage['cassandra.js'][530]++;
  var options = default_options;
  _$jscoverage['cassandra.js'][532]++;
  if (super_column_or_options) {
    _$jscoverage['cassandra.js'][534]++;
    if (super_column_or_options instanceof String || typeof super_column_or_options === "string") {
      _$jscoverage['cassandra.js'][536]++;
      column_parent.super_column = super_column_or_options;
      _$jscoverage['cassandra.js'][537]++;
      var columns_or_options = args.shift();
      _$jscoverage['cassandra.js'][538]++;
      if (columns_or_options) {
        _$jscoverage['cassandra.js'][539]++;
        var columns, options, option_name;
        _$jscoverage['cassandra.js'][540]++;
        if (typeof columns_or_options.slice === "function") {
          _$jscoverage['cassandra.js'][542]++;
          columns = columns_or_options.slice();
          _$jscoverage['cassandra.js'][543]++;
          if (! (columns instanceof Array)) {
            _$jscoverage['cassandra.js'][544]++;
            columns = [columns];
          }
          _$jscoverage['cassandra.js'][546]++;
          predicate.column_names = columns;
          _$jscoverage['cassandra.js'][547]++;
          options = args.shift() || default_options;
        }
        else {
          _$jscoverage['cassandra.js'][550]++;
          for (option_name in columns_or_options) {
            _$jscoverage['cassandra.js'][551]++;
            if (columns_or_options.hasOwnProperty(option_name)) {
              _$jscoverage['cassandra.js'][552]++;
              options[option_name] = columns_or_options[option_name];
            }
}
          _$jscoverage['cassandra.js'][555]++;
          predicate.slice_range = new ttype.SliceRange(options);
        }
      }
      else {
        _$jscoverage['cassandra.js'][558]++;
        predicate.slice_range = new ttype.SliceRange(options);
      }
    }
    else {
      _$jscoverage['cassandra.js'][562]++;
      for (option_name in super_column_or_options) {
        _$jscoverage['cassandra.js'][563]++;
        if (super_column_or_options.hasOwnProperty(option_name)) {
          _$jscoverage['cassandra.js'][564]++;
          options[option_name] = super_column_or_options[option_name];
        }
}
      _$jscoverage['cassandra.js'][567]++;
      predicate.slice_range = new ttype.SliceRange(options);
    }
  }
  else {
    _$jscoverage['cassandra.js'][570]++;
    predicate.slice_range = new ttype.SliceRange(options);
  }
  _$jscoverage['cassandra.js'][573]++;
  return [new ttype.ColumnParent(column_parent), new ttype.SlicePredicate(predicate), options.consistencyLevel];
});
_$jscoverage['cassandra.js'][584]++;
ColumnFamily.prototype.parseArgumentsForStandardCF_ = (function (args) {
  _$jscoverage['cassandra.js'][585]++;
  var default_options = {start: "", finish: "", reversed: false, count: 100, consistencyLevel: null};
  _$jscoverage['cassandra.js'][592]++;
  var column_parent = {column_family: this.name};
  _$jscoverage['cassandra.js'][595]++;
  var predicate = {};
  _$jscoverage['cassandra.js'][597]++;
  var columns_or_options = args.shift();
  _$jscoverage['cassandra.js'][598]++;
  var options = default_options;
  _$jscoverage['cassandra.js'][600]++;
  if (columns_or_options) {
    _$jscoverage['cassandra.js'][601]++;
    var columns, options, option_name;
    _$jscoverage['cassandra.js'][602]++;
    if (typeof columns_or_options.slice === "function") {
      _$jscoverage['cassandra.js'][604]++;
      columns = columns_or_options.slice();
      _$jscoverage['cassandra.js'][605]++;
      if (! (columns instanceof Array)) {
        _$jscoverage['cassandra.js'][606]++;
        columns = [columns];
      }
      _$jscoverage['cassandra.js'][608]++;
      predicate.column_names = columns;
      _$jscoverage['cassandra.js'][609]++;
      options = args.shift() || default_options;
    }
    else {
      _$jscoverage['cassandra.js'][612]++;
      for (option_name in columns_or_options) {
        _$jscoverage['cassandra.js'][613]++;
        if (columns_or_options.hasOwnProperty(option_name)) {
          _$jscoverage['cassandra.js'][614]++;
          options[option_name] = columns_or_options[option_name];
        }
}
      _$jscoverage['cassandra.js'][617]++;
      predicate.slice_range = new ttype.SliceRange(options);
    }
  }
  else {
    _$jscoverage['cassandra.js'][620]++;
    predicate.slice_range = new ttype.SliceRange(options);
  }
  _$jscoverage['cassandra.js'][623]++;
  return [new ttype.ColumnParent(column_parent), new ttype.SlicePredicate(predicate), options.consistencyLevel];
});
_$jscoverage['cassandra.js'][630]++;
exports.Client = Client;
_$jscoverage['cassandra.js'][631]++;
exports.ConsistencyLevel = ttype.ConsistencyLevel;
_$jscoverage['cassandra.js'].source = ["/* copyright 2011 Yuki Morishita&lt;mor.yuki@gmail.com&gt; */","","var sys = require('sys'),","    thrift = require('thrift'),","    Cassandra = require('../gen-nodejs/Cassandra'),","    ttype = require('../gen-nodejs/cassandra_types');","","/**"," * Cassandra Client"," *"," * @constructor"," * @api public"," */","","var Client = function(host) {","  var pair = host.split(/:/);","  this.host = pair[0];","  this.port = pair[1];","  this.defaultCL = {","    read: ttype.ConsistencyLevel.QUORUM,","    write: ttype.ConsistencyLevel.QUORUM","  };","","  this.state = 0;","}","","sys.inherits(Client, process.EventEmitter);","","/**"," * Connect to Cassandra cluster"," *"," * @param keyspace keyspace name to use"," * @param credential if given, try login into cassandra"," * @api public"," */","","Client.prototype.connect = function() {","  var args = Array.prototype.slice.call(arguments);","","  var keyspace_or_credential = args.shift();","  var credential = args.shift();","  if (keyspace_or_credential instanceof String ||","      typeof keyspace_or_credential === 'string') {","    // if first argument is string, then it is keyspace name","    this.keyspace = keyspace_or_credential;","  } else {","    credential = keyspace_or_credential;","  }","","  this.ready = false;","  this.queue = [];","","  this.connection = thrift.createConnection(this.host, this.port);","  this.connection.on('error', function(err) {","    this.emit('error', err);","  });","  this.thrift_client = thrift.createClient(Cassandra, this.connection);","","  var self = this;","  this.connection.on('connect', function(err) {","    if (err) {","      self.emit('error', err);","      return;","    }","","    // if credential is given, then call login","    if (credential) {","      self.thrift_client.login(","        new ttype.AuthenticationRequest(credential), function(err) {","","          if (err) {","            self.emit('error', err);","            return;","          }","","          // only when login is success, emit connected event","          self.ready = true;","          self.dispatch();","        });","    } else {","      self.ready = true;","      self.dispatch();","    }","  });","","  // if keyspace is specified, use that ks","  if (this.keyspace) {","    this.use(this.keyspace, function(err) {","      if (err) {","        self.emit('error', err);","      }","    });","  }","};","","Client.prototype.use = function(keyspace, callback) {","  var args = Array.prototype.slice.call(arguments);","  if (!this.ready) {","    this.queue.push([arguments.callee, args]);","    return;","  }","","  this.keyspace = keyspace;","","  var self = this;","  this.thrift_client.describe_keyspace(this.keyspace, function(err, ksdef) {","    if (err) {","      self.emit('error', err);","      return;","    }","    self.definition_ = ksdef;","    self.column_families_ = {};","","    var i = ksdef.cf_defs.length;","    var cf;","    while (i--) {","      cf = ksdef.cf_defs[i];","      self.column_families_[cf.name] = cf;","    }","","    self.thrift_client.set_keyspace(self.keyspace, function(err) {","      if (err) {","        selt.emit('error', err);","        return;","      }","      self.emit('keyspaceSet', self.column_families_);","    });","  });","};","","/**"," * Set or get default consistency level"," *"," * @param consistencyLevel An object which has write and read consistency level."," *           If given, sets default consistency level."," *                         "," */","Client.prototype.consistencyLevel = function() {","  if (arguments.length == 0) {","    return this.defaultCL;","  } else {","    var newCL = arguments[0];","    this.defaultCL.read = newCL.read || ttype.ConsistencyLevel.QUORUM;","    this.defaultCL.write = newCL.write || ttype.ConsistencyLevel.QUORUM;","  }","};","","/**"," *"," */","Client.prototype.addKeySpace = function(ksdef, callback) {","  var args = Array.prototype.slice.call(arguments);","  if (!this.ready) {","    this.queue.push([arguments.callee, args]);","    return;","  }","","  this.thrift_client.system_add_keyspace(new ttype.KsDef(ksdef), callback);","};","","/**"," *"," */","Client.prototype.dropKeySpace = function(keyspace, callback) {","  var args = Array.prototype.slice.call(arguments);","  if (!this.ready) {","    this.queue.push([arguments.callee, args]);","    return;","  }","","  this.thrift_client.system_drop_keyspace(keyspace, callback);","};","","/**"," * Get column family to perform query or mutation"," *"," * @param name ColumnFamily name to get"," * @return An instance of ColumnFamily"," */","Client.prototype.getColumnFamily = function(name) {","  return new ColumnFamily(this, name);","};","","/**"," * Close connection"," */","Client.prototype.close = function() {","  this.connection.end();","};","","Client.prototype.dispatch = function() {","  if (this.ready) {","    if (this.queue.length &gt; 0) {","      var next = this.queue.shift();","      next[0].apply(this, next[1]);","      this.dispatch();","    }","  }","};","","/**"," *"," * @param client Client"," * @param name name of this Column Family"," * @constructor"," */","var ColumnFamily = function(client, name) {","  this.name = name;","  this.queue = [];","  this.ready = false;","  this.client_ = client;","","  var self = this;","  this.client_.on('keyspaceSet', function(cfdef) {","    // check to see if column name is valid","    var cf = cfdef[self.name];","    if (!cf) {","      // column family does not exist","      self.client_.emit('error', new Error('Column Family ' + self.name + ' does not exist.'));","    }","","    // copy all cfdef properties","    for (var prop in cf) {","      if (cf.hasOwnProperty(prop)) {","        self[prop] = cf[prop];","      }","    }","    self.isSuper = self.column_type === 'Super';","    self.ready = true;","","    self.dispatch();","  });","};","","/**"," * Get data from cassandra"," *"," * @param keys row keys to fetch"," * @param columns optional. which columns to retrieve"," * @param options optional. valid params are start, finish, reversed, count"," * @param callback callback function which called after data retrieval."," */","ColumnFamily.prototype.get = function() {","  var args = Array.prototype.slice.call(arguments);","  if (!this.ready) {","    this.queue.push([arguments.callee, args]);","    return;","  }","","  // last argument may be callback","  var callback;","  if (typeof args[args.length - 1] === 'function') {","    callback = args.pop();","  }","  // keys to get","  var keys = args.shift();","  // if only one key specified, turn it to array","  if (!(keys instanceof Array)) {","    keys = [keys];","  }","","  var method_args = this.isSuper ? this.parseArgumentsForSuperCF_(args) : this.parseArgumentsForStandardCF_(args);","  var column_parent = method_args[0];","  var predicate = method_args[1];","  var cl = method_args[2] || this.client_.defaultCL.read;","","  var self = this;","  this.client_.thrift_client.multiget_slice(","    keys, column_parent, predicate, cl,","    function(err, res) {","      if (err) {","        callback(err, obj);","      }","","      // array -&gt; obj","      var obj = {};","      var key, col, sub_col;","      for (key in res) {","        if (res.hasOwnProperty(key)) {","          obj[key] = {};","          var i = res[key].length;","          while (i--) {","            col = res[key][i].super_column;","            if (col) {","              // super","              obj[key][col.name] = {};","              var j = col.columns.length;","              while (j--) {","                sub_col = col.columns[j];","                obj[key][col.name][sub_col.name] = sub_col.value;","              }","            } else {","              // standard","              col = res[key][i].column;","              obj[key][col.name] = col.value;","            }","          }","        }","      }","      if (keys.length == 1) {","        obj = obj[keys[0]];","      }","      callback(err, obj);","      if (keys.length == 1) {","        res = res[keys[0]];","      }","      callback(err, res);","    });","};","","/**"," * Get column count from cassandra"," *"," * @param keys row keys to fetch"," * @param columns optional. which columns to retrieve"," * @param options optional. valid params are start, finish, reversed, count"," * @param callback callback function which called after data retrieval."," */","ColumnFamily.prototype.count = function() {","  var args = Array.prototype.slice.call(arguments);","  if (!this.ready) {","    this.queue.push([arguments.callee, args]);","    return;","  }","","  // last argument may be callback","  var callback;","  if (typeof args[args.length - 1] === 'function') {","    callback = args.pop();","  }","  // keys to get","  var keys = args.shift();","  // if only one key specified, turn it to array","  if (!(keys instanceof Array)) {","    keys = [keys];","  }","","  var method_args = this.isSuper ? this.parseArgumentsForSuperCF_(args) : this.parseArgumentsForStandardCF_(args);","  var column_parent = method_args[0];","  var predicate = method_args[1];","  var cl = method_args[2] || this.client_.defaultCL.read;","","  this.client_.thrift_client.multiget_count(","    keys, column_parent, predicate, cl,","    function(err, res) {","      if (err) {","        callback(err, obj);","      }","      ","      var obj = {};","      var key, count;","      for (key in res) {","        if (res.hasOwnProperty(key)) {","          obj[key] = res[key];","        }","      }","      if (keys.length == 1) {","        obj = obj[keys[0]];","      }","      callback(err, obj);","    });","};","","/**"," * slice data"," */","ColumnFamily.prototype.slice = function() {","  this.client_.emit('error', new Error('slice(get_range_slices, get_indexed_slices) not supported.'));","};","","/**"," * set (insert or update) data"," */","ColumnFamily.prototype.set = function() {","  var args = Array.prototype.slice.call(arguments);","  if (!this.ready) {","    this.queue.push([arguments.callee, args]);","    return;","  }","","  var callback;","  if (typeof args[args.length - 1] === 'function') {","    callback = args.pop();","  }","","  var key = args.shift();","  var values = args.shift() || {};","  var options = args.shift() || {};","  var cl = options.consistencyLevel || this.client_.defaultCL.write;","  var ts = new Date().getTime();","","  var prop, value;","  var mutations = [], columns;","  if (this.isSuper) {","    // super","    for (prop in values) {","      if (values.hasOwnProperty(prop)) {","        columns = [];","        value = values[prop];","        for (var col in value) {","          columns.push(new ttype.Column({","            name: col,","            value: '' + value[col],","            timestamp: ts,","            ttl: null","          }));","        }","        // prop is super column name","        mutations.push(new ttype.Mutation({","          column_or_supercolumn: new ttype.ColumnOrSuperColumn({","            super_column: new ttype.SuperColumn({","              name: prop,","              columns: columns","            })","          })","        }));","      }","    }","  } else {","    // standard","    for (prop in values) {","      mutations.push(new ttype.Mutation({","        column_or_supercolumn: new ttype.ColumnOrSuperColumn({","          column: new ttype.Column({","            name: prop,","            value: '' + values[prop],","            timestamp: ts,","            ttl: null","          })","        })","      }));","    }","  }","","  var mutation_map = {};","  mutation_map[key] = {};","  mutation_map[key][this.name] = mutations;","","  this.client_.thrift_client.batch_mutate(mutation_map, cl, callback);","};","","/**"," * remove data"," */","ColumnFamily.prototype.remove = function() {","  var args = Array.prototype.slice.call(arguments);","  if (!this.ready) {","    this.queue.push([arguments.callee, args]);","    return;","  }","","  var callback;","  if (typeof args[args.length - 1] === 'function') {","    callback = args.pop();","  }","","  var key = args.shift();","","  var method_args = this.isSuper ? this.parseArgumentsForSuperCF_(args) : this.parseArgumentsForStandardCF_(args);","  var column_parent = method_args[0];","  var predicate = method_args[1];","  var cl = method_args[2] || this.client_.defaultCL.write;","","  var ts = new Date().getTime();","","  var mutations = [];","  mutations.push(new ttype.Mutation({","    deletion: new ttype.Deletion({","      timestamp: ts,","      super_column: column_parent.super_column,","      predicate: predicate.column_names ? predicate : null","    })","  }));","","  var mutation_map = {};","  mutation_map[key] = {};","  mutation_map[key][this.name] = mutations;","","  this.client_.thrift_client.batch_mutate(mutation_map, cl, callback);","};","","/**"," * truncate this column family"," **/","ColumnFamily.prototype.truncate = function() {","  var args = Array.prototype.slice.call(arguments);","  if (!this.ready) {","    this.queue.push([arguments.callee, args]);","    return;","  }","","  var callback = args.shift();","  this.client_.thrift_client.truncate(this.name, callback);","}","","/**"," * dispatch queries when client is ready"," * @api private"," **/","ColumnFamily.prototype.dispatch = function() {","  if (this.ready) {","    if (this.queue.length &gt; 0) {","      var next = this.queue.shift();","      next[0].apply(this, next[1]);","      this.dispatch();","    }","  }","};","","/**"," * "," * @api private"," * @param args"," * @return [ColumnParent, SlicePredicate, ConsistencyLevel]"," */","ColumnFamily.prototype.parseArgumentsForSuperCF_ = function(args) {","  var default_options = {","    start: '',","    finish: '',","    reversed: false,","    count: 100,","    consistencyLevel: null","  };","  var column_parent = {","    column_family: this.name","  };","  var predicate = {};","","  var super_column_or_options = args.shift();","  var options = default_options;","","  if (super_column_or_options) {","    // first argumet may be super column name","    if (super_column_or_options instanceof String ||","        typeof super_column_or_options === 'string') {","      column_parent.super_column = super_column_or_options;","      var columns_or_options = args.shift();","      if (columns_or_options) {","        var columns, options, option_name;","        if (typeof columns_or_options.slice === 'function') {","          // first argument is column name(s)","          columns = columns_or_options.slice();","          if (!(columns instanceof Array)) {","            columns = [columns];","          }","          predicate.column_names = columns;","          options = args.shift() || default_options;","        } else {","          // update default option with given value","          for (option_name in columns_or_options) {","            if (columns_or_options.hasOwnProperty(option_name)) {","              options[option_name] = columns_or_options[option_name];","            }","          }","          predicate.slice_range = new ttype.SliceRange(options);","        }","      } else {","        predicate.slice_range = new ttype.SliceRange(options);","      }","    } else {","      // update default option with given value","      for (option_name in super_column_or_options) {","        if (super_column_or_options.hasOwnProperty(option_name)) {","          options[option_name] = super_column_or_options[option_name];","        }","      }","      predicate.slice_range = new ttype.SliceRange(options);","    }","  } else {","    predicate.slice_range = new ttype.SliceRange(options);","  }","","  return [new ttype.ColumnParent(column_parent),","         new ttype.SlicePredicate(predicate),","         options.consistencyLevel];","}","","/**"," *"," * @api private"," * @param args"," * @return [ColumnParent, SlicePredicate, ConsistencyLevel]"," */","ColumnFamily.prototype.parseArgumentsForStandardCF_ = function(args) {","  var default_options = {","    start: '',","    finish: '',","    reversed: false,","    count: 100,","    consistencyLevel: null","  };","  var column_parent = {","    column_family: this.name","  };","  var predicate = {};","","  var columns_or_options = args.shift();","  var options = default_options;","","  if (columns_or_options) {","    var columns, options, option_name;","    if (typeof columns_or_options.slice === 'function') {","      // first argument is column name(s)","      columns = columns_or_options.slice();","      if (!(columns instanceof Array)) {","        columns = [columns];","      }","      predicate.column_names = columns;","      options = args.shift() || default_options;","    } else {","      // update default option with given value","      for (option_name in columns_or_options) {","        if (columns_or_options.hasOwnProperty(option_name)) {","          options[option_name] = columns_or_options[option_name];","        }","      }","      predicate.slice_range = new ttype.SliceRange(options);","    }","  } else {","    predicate.slice_range = new ttype.SliceRange(options);","  }","","  return [new ttype.ColumnParent(column_parent),","         new ttype.SlicePredicate(predicate),","         options.consistencyLevel];","}","","/** module exports */","","exports.Client = Client;","exports.ConsistencyLevel = ttype.ConsistencyLevel;"];
